/**\n * API 연결 테스트를 위한 유틸리티 함수들\n */\n\nexport const testApiConnection = async () => {\n  const baseUrl = process.env.NEXT_PUBLIC_API_BASE_URL || '/api';\n  console.log('🧪 API 연결 테스트 시작...');\n  console.log('🔗 Base URL:', baseUrl);\n\n  try {\n    // 1. 기본 API 경로 테스트\n    const healthCheckUrl = `${baseUrl}/health`;\n    console.log('📡 Health Check 요청:', healthCheckUrl);\n    \n    const healthResponse = await fetch(healthCheckUrl, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    \n    console.log('📊 Health Check 응답:', {\n      status: healthResponse.status,\n      statusText: healthResponse.statusText,\n      headers: Object.fromEntries(healthResponse.headers.entries()),\n    });\n\n    // 2. Courses API 테스트\n    const coursesUrl = `${baseUrl}/courses`;\n    console.log('📡 Courses API 요청:', coursesUrl);\n    \n    const coursesResponse = await fetch(coursesUrl, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    \n    console.log('📊 Courses API 응답:', {\n      status: coursesResponse.status,\n      statusText: coursesResponse.statusText,\n      headers: Object.fromEntries(coursesResponse.headers.entries()),\n    });\n\n    if (coursesResponse.ok) {\n      const coursesData = await coursesResponse.json();\n      console.log('✅ Courses 데이터:', coursesData);\n    }\n\n    return {\n      healthCheck: healthResponse.status,\n      coursesApi: coursesResponse.status,\n    };\n  } catch (error) {\n    console.error('❌ API 테스트 중 오류:', error);\n    throw error;\n  }\n};\n\nexport const testSpecificCourseUpdate = async (courseId: string) => {\n  const baseUrl = process.env.NEXT_PUBLIC_API_BASE_URL || '/api';\n  const updateUrl = `${baseUrl}/courses/${courseId}`;\n  \n  console.log('🧪 특정 강의 업데이트 URL 테스트:', updateUrl);\n  \n  try {\n    // OPTIONS 요청으로 허용된 메서드 확인\n    const optionsResponse = await fetch(updateUrl, {\n      method: 'OPTIONS',\n    });\n    \n    console.log('📊 OPTIONS 응답:', {\n      status: optionsResponse.status,\n      headers: Object.fromEntries(optionsResponse.headers.entries()),\n    });\n    \n    return optionsResponse.status;\n  } catch (error) {\n    console.error('❌ OPTIONS 요청 실패:', error);\n    throw error;\n  }\n};\n\nexport const validateFormData = (formData: FormData) => {\n  console.log('🔍 FormData 유효성 검사 시작...');\n  \n  const requiredFields = ['title', 'description', 'category', 'price', 'status'];\n  const missingFields: string[] = [];\n  \n  for (const field of requiredFields) {\n    const value = formData.get(field);\n    if (!value || (typeof value === 'string' && !value.trim())) {\n      missingFields.push(field);\n    }\n  }\n  \n  if (missingFields.length > 0) {\n    console.error('❌ 누락된 필수 필드:', missingFields);\n    return {\n      isValid: false,\n      missingFields,\n    };\n  }\n  \n  console.log('✅ FormData 유효성 검사 통과');\n  return {\n    isValid: true,\n    missingFields: [],\n  };\n};\n